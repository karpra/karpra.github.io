<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>/dev/random</title>
 <link href="http://karpra.github.io/" rel="self"/>
 <link href="http://karpra.github.io"/>
 <updated>2015-09-14T23:06:03-04:00</updated>
 <id>http://karpra.github.io</id>
 <author>
   <name>karthik</name>
   <email></email>
 </author>

 
 <entry>
   <title> saltstack</title>
   <link href="http://karpra.github.io/cheatsheet/2015/11/09/%20saltstack"/>
   <updated>2015-11-09T00:00:00-05:00</updated>
   <id>http://karpra.github.io/cheatsheet/2015/11/09/ saltstack</id>
   <content type="html">&lt;h5 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;#headers&quot;&gt;Headers&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#emphasis&quot;&gt;Emphasis&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#table&quot;&gt;Table&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;headers&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;headers&quot;&gt;Headers&lt;/h2&gt;

&lt;p&gt;&lt;a name=&quot;emphasis&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;emphasis&quot;&gt;Emphasis&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Tables&lt;/td&gt;
      &lt;td&gt;Are&lt;/td&gt;
      &lt;td&gt;Cool&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;———-&lt;/td&gt;
      &lt;td&gt;————-&lt;/td&gt;
      &lt;td&gt;——&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 1 is&lt;/td&gt;
      &lt;td&gt;left-aligned&lt;/td&gt;
      &lt;td&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td&gt;centered&lt;/td&gt;
      &lt;td&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td&gt;right-aligned&lt;/td&gt;
      &lt;td&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&quot;table&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;table&quot;&gt;Table&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Default aligned&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Left aligned&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Center aligned&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Right aligned&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;First body part&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Second cell&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Third cell&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;fourth cell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Second line&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;foo&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;strong&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;baz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Third line&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;quux&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;baz&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;bar&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Second body&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2 line&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Footer row&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Syntax&lt;/th&gt;
      &lt;th&gt;Output&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;#h1 Headings (or) &amp;lt;h1&amp;gt; Helloa &amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&amp;lt;h1&amp;gt;Heading&amp;lt;/h1&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title> markdown</title>
   <link href="http://karpra.github.io/cheatsheet/2015/11/09/%20markdown"/>
   <updated>2015-11-09T00:00:00-05:00</updated>
   <id>http://karpra.github.io/cheatsheet/2015/11/09/ markdown</id>
   <content type="html">&lt;table rules=&quot;groups&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;a&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;b&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;c&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;h1&amp;gt;abc&amp;lt;/h1&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title> continuous integration</title>
   <link href="http://karpra.github.io/concept/2015/04/15/%20continuous%20integration"/>
   <updated>2015-04-15T00:00:00-04:00</updated>
   <id>http://karpra.github.io/concept/2015/04/15/ continuous integration</id>
   <content type="html">&lt;h2 id=&quot;what-is-ci-continous-integration&quot;&gt;What is CI (Continous Integration)?&lt;/h2&gt;

&lt;p&gt;Continuous integration (CI) is the practice in software engineering, of merging all developer working copies into a single integrated Environment several times a day. The main aim of CI is to prevent integration problems, referred to as “integration hell” &amp;amp; to bring in governance of Software Development Life Cycle (SDLC) practices.&lt;/p&gt;

&lt;p&gt;CI helps in agile adoption/methodology and is considered as an improvement over frequent integration.&lt;/p&gt;

&lt;h2 id=&quot;why-ci&quot;&gt;Why CI?&lt;/h2&gt;

&lt;p&gt;Any Application that goes through a development phase of SDLC adheres to multiple tools usage irrespective of number of developers in different geographies.Although its a good (or) best practice to adhere to these tools during the projects inception even if there is only one developer in the project.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Version Control Repository(VCS).&lt;/li&gt;
  &lt;li&gt;Integrated Development Environment (IDE).&lt;/li&gt;
  &lt;li&gt;Build Script.&lt;/li&gt;
  &lt;li&gt;Development.&lt;/li&gt;
  &lt;li&gt;Unit Testing.&lt;/li&gt;
  &lt;li&gt;Building &amp;amp; Deploying.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Developers take a copy of repository(base code) on their local machine and start developing , unit testing before the code 
is checked in the version control system.&lt;/p&gt;

&lt;p&gt;Below is a typical CI Workflow &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/01_16_2015_1.jpg&quot; alt=&quot;process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typically CI Server is scheduled to run nightly builds &amp;amp; deploys to the runtime enviroment ( application server) or any runtime environment hosting the source code artifacts. Apart from the nightly builds it does have feature to initiate a build on the fly once the developer checkin the code into VCS.&lt;/p&gt;

&lt;p&gt;CI Server checks out the proect repository(source code, unit test scripts,build scripts) from the VCS &amp;amp; uses the build script to compile the source code and then build the artifact. In the process of CI pipeline it would then deploy to the runtime environment &amp;amp; go ahead with Unit testing the artifact &amp;amp; catalogue the report of success of failure in the CI dashboard.&lt;/p&gt;

&lt;p&gt;We can configure the CI Server to send out alerts or reports of the build to the email or messaging system of the team responsible for the build. This helps in the local copy of the source code checked in and tested &amp;amp; ready for QA team to exercise overall integrated testing of the application.&lt;/p&gt;

&lt;p&gt;Generally each developer before checkin the work to VCS,do a complete build and run (and pass) all unit tests. Integration tests are usually run automatically on a CI server when it detects a new commit.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Continuous integration help in detecting the broken build scenarios early, also makes sure all local copies are always checked in VCS project repository eliminating any code or data loss. It aids in faster code building and deployment with less human error &amp;amp; avoid “integration hell”, it reduces the “merge hell” by detecting early in the cycle than too late and too many files or repositories to merge.&lt;/p&gt;

&lt;p&gt;Continuous integration involves integrating early and often, so as to avoid the pitfalls of “integration hell”. The practice aims to reduce rework and thus reduce cost and time.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title> cloud computing</title>
   <link href="http://karpra.github.io/concept/2015/02/08/%20cloud%20computing"/>
   <updated>2015-02-08T00:00:00-05:00</updated>
   <id>http://karpra.github.io/concept/2015/02/08/ cloud computing</id>
   <content type="html">&lt;h1 id=&quot;what-is-cloud-computing&quot;&gt;What is Cloud Computing&lt;/h1&gt;
&lt;p&gt;The concept of cloud computing has existed for 50 years, since the beginning of the Internet.It was devised the idea of time-sharing in computers as a utility in 1957.Since then, the concept’s name has undergone several changes: from service bureau, to application service provider, to the Internet as a service, to cloud computing, and to software-defined datacenters, with each name having different nuances. However, the core concept is the same: providing IT services based on the Internet (the cloud).&lt;/p&gt;

&lt;h1 id=&quot;models-of-cloud-computing&quot;&gt;Models of Cloud Computing&lt;/h1&gt;
&lt;p&gt;Cloud Computing architecture has three models: infrastructure as a service (IaaS),platform as a service (PaaS) and software as a service (SaaS).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;infrastucture-as-a-service-iaas&quot;&gt;Infrastucture as a Service (IaaS)&lt;/h2&gt;
    &lt;p&gt;It virtualizes the data center’s computing power, storage, loadbalancers , templatized runtime engines and network connectivity. Users can scale these computing resources up and down on demand dynamically and/or based on a given set of rules upon which action would be taken by the cloud engine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;platform-as-a-service-paas&quot;&gt;Platform as a Service (PaaS)&lt;/h2&gt;
    &lt;p&gt;It provides a development platform with services to assist application design, implementation, testing, deploy­ment, monitoring, and hosting in the cloud. It requires no software download( although not entirely true may need to download IDE to be able to work with Cloud runtimes) or installation and supports geographi­cally distributed collaborative work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;software-as-a-servicesaas&quot;&gt;Software as a Service(SaaS)&lt;/h2&gt;
    &lt;p&gt;It includes both software components (for application developers) and applications (for users). An SaaS application is often a service-oriented program so that it is easy to integrate with other SaaS applications.Software that performs various tasks is not on the client machine. Instead, third-party service providers host and manage the software services in the cloud.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;key-attributes-of-cloud-computing&quot;&gt;Key Attributes of Cloud Computing&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Agility.&lt;/li&gt;
  &lt;li&gt;Multi tenancy.&lt;/li&gt;
  &lt;li&gt;Scalibility and Elasticity.&lt;/li&gt;
  &lt;li&gt;Monitoring &amp;amp; Performance Optimization Enablement.&lt;/li&gt;
  &lt;li&gt;Security.&lt;/li&gt;
  &lt;li&gt;Maintenancibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;deployment-models&quot;&gt;Deployment Models.&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;private-cloud&quot;&gt;Private Cloud.&lt;/h3&gt;
    &lt;p&gt;Private cloud is cloud infrastructure operated solely for a single organization, whether managed internally or by a third-party, and hosted either internally or externally. Most Organizations already use virtualization internally to provision environments as it has minimizes their need to go through hardware procurement lifecycle of buy , build and manage hardware systems in their datacenter. Virtualization is indeed some form of private cloud , or you can host applications in cloud providers restricting to only your network.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;public-cloud&quot;&gt;Public Cloud.&lt;/h3&gt;
    &lt;p&gt;A cloud is called a “public cloud” when the services are rendered over a network that is open for public use.Technically there may be little or no difference between public and private cloud architecture, however, security consideration may be substantially different for services (applications, storage, and other resources) that are made available by a service provider for a public audience and when communication is effected over a non-trusted network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;hybrid-cloud&quot;&gt;Hybrid Cloud.&lt;/h3&gt;
    &lt;p&gt;Hybrid cloud is a composition of two or more clouds (private and/or public) that remain distinct entities but are bound together, offering the benefits of multiple deployment models. Hybrid cloud can also mean the ability to connect collocation, managed and/or dedicated services with cloud resources. It could also be public clouds in more than one cloud providers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cloud-providers&quot;&gt;Cloud Providers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon AWS(IaaS,PaaS)&lt;/li&gt;
  &lt;li&gt;Google AppEngine,CloudEngine (IaaS,PaaS)&lt;/li&gt;
  &lt;li&gt;Microsoft Azure (Iaas,PaaS)&lt;/li&gt;
  &lt;li&gt;Rackspace OpenStack(IaaS)&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title> nginx</title>
   <link href="http://karpra.github.io/server/2015/01/16/%20nginx"/>
   <updated>2015-01-16T00:00:00-05:00</updated>
   <id>http://karpra.github.io/server/2015/01/16/ nginx</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Nginx(pronounced EngineX) is one of the most popular web servers in the world and is responsible for hosting some of the largest and highest-traffic sites on the internet. It is more resource-friendly than Apache in most cases and can be used as a web server or a reverse proxy.&lt;/p&gt;

&lt;p&gt;I am going to create a Virtual Machine which will run Linux OS in our case Ubuntu Linux 64 bit ( Trusty for version 14.04 ) for sake of mimicking an environment as much close to real production system. I have used &lt;strong&gt;Vagrant&lt;/strong&gt; for managing my virtual machine and provisioning it for I can be saved from hastle of downloading a Ubuntu Linux ISO and installing on newly created Virtual Machine. &lt;/p&gt;

&lt;h2 id=&quot;pre-requisite&quot;&gt;Pre-Requisite&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Vagrant&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VirtualBox&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are not familiar with Vagrant ,Please refer to my article on Vagrant &amp;amp; its use &lt;a href=&quot;http://karpra.github.io/devops/2014/09/19/introduction%20to%20vagrant/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although I am provisioning a Ubuntu box , you are free to choose your preference of OS from the list of available
&lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;Vagrant boxes&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant init ubuntu/trusty64
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this command is initiated the machine will start booting up and you should see something similar to the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; default: Checking if box &#39;ubuntu/trusty64&#39; is up to date...
==&amp;gt; default: Resuming suspended VM...
==&amp;gt; default: Booting VM...
==&amp;gt; default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Connection refused. Retrying...
==&amp;gt; default: Machine booted and ready!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can ssh into the Virtual Machine by using the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can run command to check the ipaddress of the machine using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant assigns a ip address by default from your router or DHCP Server , which is dynamic.
But for the sake of experimentation we do not need to go through the details of DHCP Configuration , although
we can define out own private network for you to access it on the machine you have created your virtual machine.&lt;/p&gt;

&lt;p&gt;You can edit your Vagrantfile &amp;amp; uncomment the below line and assign a ip address like 192.168.33.10&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you do that you should load the recent changed by using the below command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; vagrant reload (or) vagrant halt followed by vagrant start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can continue to use vagrant ssh or ssh manually using below command in terminal or putty( in windows).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh vagrant@192.168.33.10 (or) vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the same result.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;I have provisioned a ubuntu box using vagrant and i will go over details of installation of nginx in the provisioned ubuntu linux.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get upgrade
vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get update
vagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the nginx server running in the box &amp;amp; you can check if its running by using following command below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~$ ps -ef | grep nginx
root      1093     1  0 Jan15 ?        00:00:00 nginx: master process /usr/sbin/nginx
www-data  1094  1093  0 Jan15 ?        00:00:24 nginx: worker process
www-data  1095  1093  0 Jan15 ?        00:00:00 nginx: worker process
www-data  1096  1093  0 Jan15 ?        00:00:26 nginx: worker process
www-data  1097  1093  0 Jan15 ?        00:00:26 nginx: worker process
vagrant   9206  9185  0 21:31 pts/0    00:00:00 grep --color=auto nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now should you go to the browser and type this http://192.168.33.10/&lt;/p&gt;

&lt;p&gt;You should be able to see nginx serving and displaying something on the browser.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> http server</title>
   <link href="http://karpra.github.io/server/2014/09/20/%20http%20server"/>
   <updated>2014-09-20T00:00:00-04:00</updated>
   <id>http://karpra.github.io/server/2014/09/20/ http server</id>
   <content type="html">&lt;h2 id=&quot;what-is-web-aka-http-server&quot;&gt;What is Web (aka) Http Server?&lt;/h2&gt;

&lt;p&gt;The primary function of a web server is to store, process and deliver web pages to clients. The communication between client and server takes place using the Hypertext Transfer Protocol (HTTP). Pages delivered are most frequently HTML documents, which may include images, style sheets and scripts in addition to text content premodinantely static content.&lt;/p&gt;

&lt;p&gt;Although it serve the dynamic content of html pages using php , python , asp plugin to serve the html pages with code embedded in them.&lt;/p&gt;

&lt;h2 id=&quot;what-are-available-http-servers-&quot;&gt;What are available Http Servers ?&lt;/h2&gt;

&lt;p&gt;IIS(propietary) , Apache Http Server , nginx , lighthttpd or GWS(propietary) are the popuar webservers in the market. For the sake of this discussion we will pick the key differences between apache and nginx webservers which are open source with more market share.&lt;/p&gt;

&lt;h2 id=&quot;difference-between-web-server--application-server-&quot;&gt;Difference between Web Server &amp;amp; Application Server ?&lt;/h2&gt;

&lt;p&gt;This is one of most widely asked question for anyone not knowing the difference between the two types of servers. For sake of this discussion let me choose Apache Foundations http server(web server)  versus tomcat(appliaction server).&lt;/p&gt;

&lt;p&gt;Application server can also hsot web application and render it like web server , so you might as why is web server in place and what does it serve. Application Server is combination of many components atleast in JEE world like web component , ejb component(not available in tomcat) , jmx component etc , it also provides an API for the users to use them to interact with these components in building an application. &lt;/p&gt;

&lt;p&gt;Web Server on the other hand has only core http capabilities to render the html content to the client and communicating between the client and the static pages or the application in the backend. It also bring in features of session replication , load balancing between multiple backend applications based on client load , encapsulating your application server behind &amp;amp; protect it from DDOS attacks or back channel hacking through the port or sql injection etc.&lt;/p&gt;

&lt;h2 id=&quot;apache-vs-nginx&quot;&gt;Apache Vs nginx&lt;/h2&gt;

&lt;p&gt;The main difference between Apache which is process driven architecture compared to nginx which is event based architecture. So in essence nginx can serve more concurrent users utilizing the computers hardware effectively than apache providing high throughput for static contents. The reason i mentioned static contents is because of the fact that if its dymanic pages like php major bottleneck is in the plugin rather than the webserver itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/architecture.png&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nginx as mentioned uses a event driven architecture , let me go little bit more to explain what it means by event driven architecture. Nginx ( aka Engine X) operates on a single thread , asynchornous &amp;amp; non bloking architecture. Traditional servers used a thread based model for every request a thread is spawnned which is blocking call &amp;amp; utilizes the CPU, Memory till the request is served with a response hence these are reffered as blocking calls. Apache uses thread based architecture &amp;amp; is dependant on the hardware to scale , unlike nginx which uses single threaded non blocking calls to serve the contents &amp;amp; is scalable to use the hardware effectively to produce better throughput service concurent users effectively.  &lt;/p&gt;

&lt;p&gt;Apache recently added multi processing module to its release , but still uses threaded model. But it has been there for a long time with more documentation , support &amp;amp; has more tools avaialble for different configuration needs &amp;amp; lots of plugins are available which are tested and production ready.&lt;/p&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;

&lt;p&gt;Web Servers bring in lots of features and has it place.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Load Balancing &amp;amp; failover.&lt;/li&gt;
  &lt;li&gt;URL rewriting.&lt;/li&gt;
  &lt;li&gt;Virtual Hosts.&lt;/li&gt;
  &lt;li&gt;Reverse Proxy or Forward Proxy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Web Servers can act as a software load balancer between two back end servers using request counting or weighted traffic or pending request or round robin mechanism. It also acts like reverse proxy or forward proxy in between the client and actual application servers serving like an encapsulation in networking terms. It can help us run many servers in the same harward and isolating them virtually as seperate hosts in combination with loadbalaning feature of web servers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Web Servers always has its place , the only thing to take into account during decision to choose is based on the actual requirement that the webserver will serve. If its serving a single application then nginx might serve its purpose better , although if the web server hosts multiple applications then Apache might be a better fit with its confiuguration capabilities with better documentation and support. If scalability is the only concern then nginx performs better than apache. There is no right web server it needed to experimented in trial and error basic and based on the analysis one must choose which one supports their application better.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> vagrant</title>
   <link href="http://karpra.github.io/productivity/2014/09/19/%20vagrant"/>
   <updated>2014-09-19T00:00:00-04:00</updated>
   <id>http://karpra.github.io/productivity/2014/09/19/ vagrant</id>
   <content type="html">&lt;h2 id=&quot;what-is-vagrant&quot;&gt;What is Vagrant?&lt;/h2&gt;

&lt;p&gt;Vagrant is an amazing dev productivity tool for managing virtual machines using command line which lets run the virtual machine in headless mode. It is template based and can be extended to a standard box and its fast enough to boot the virtual machine using this tool.&lt;/p&gt;

&lt;p&gt;Please download vagrant &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;The main reasoning to use virtual machine during development is to isolate environments in a seperate container than messing up with different versions of jdk or python etc any sdks or multiple application servers creating conflicts etc &amp;amp; having to support different versions in host machine. I have been a big proponent of developing applications mimicing as much as running in typical isolated environments hosted in linux enviroments just as much finally the shipped product will ultimately run on it.&lt;/p&gt;

&lt;p&gt;Ofcourse we can maintain isolation in case of python environments using &lt;a href=&quot;http://virtualenv.readthedocs.org/en/latest/&quot;&gt;virtualenv&lt;/a&gt;
&amp;amp; run different version of jdk in case of java but have to constantly update the java home variable in mac or create a bash or cmd script to set the java home based on the version being used. I liked the idea of not having to manage version dependencies and freeze an environment to do development and not to worry about managing different version of software etc to be installed in host machine &amp;amp; also should i migrate the virtual machine to another machine its straight forward and i can avoid going through process of installation of softwares etc &amp;amp; i can replicate the virtual machine using export options.&lt;/p&gt;

&lt;p&gt;Since i am a big proponent of open source I started using &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtual Box&lt;/a&gt; , it solved environment isolation problem &amp;amp; dependency issues aiding in keeping the host machine cleaner with no trace of software version installed for runtime , ofcourse it not entirely true as u need jdks or python versions installed for ide to use and compile code to be deployed for runtime container in vm.&lt;/p&gt;

&lt;p&gt;You can ofcourse use VMWare solution to provision a VM , i thought it was bulky for development environments. Sometimes u will need VMWare licensed software to run on mac which is what i use.&lt;/p&gt;

&lt;h2 id=&quot;why-vagrant&quot;&gt;Why Vagrant?&lt;/h2&gt;

&lt;p&gt;Before vagrant existed i use to provision a vm for a given OS lets say Linux 64 bit Ubuntu version , I will go about downloading the iso image &amp;amp; installed in a virtual machine and then go about installing other softwares to keep the environment ready for code to be deployed for testing purpose. This ensured i had a linux environment hosting application just as much a smaller subset of production kind of environment ofcourse without benefits of clustering as i thought it was overkill to do development in a clustered environment unless the software or application has cluster aware features. &lt;/p&gt;

&lt;p&gt;This whole process was time consuming &amp;amp; managing was difficult , but once created it had the same benefits of isolated linux enviornment running app servers or servers. I would probably keep a golden copy of virtual machine hard disk installed with os &amp;amp; export and keep it ready to import for next use into another virutal machine though it had its own issues of lot of time in importing and exporting virtual machine hard disk as OVF file.&lt;/p&gt;

&lt;p&gt;Vagrant helped in process of providing a readily available box which can be added to vagrant environment which still uses virtual box but its much faster and quicker to add than import export. Also it helped not just provide base boxes for different OS but also help in running the virtual machines seemlessly in a headless fashion.&lt;/p&gt;

&lt;h2 id=&quot;using-vagrant&quot;&gt;Using Vagrant&lt;/h2&gt;

&lt;p&gt;Vagrant provides set of already created boxes referred as base boxes.Please feel free to download the vagrant base box &lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download these bases boxes or few vagrant boxes are also provisioned in github projects.&lt;/p&gt;

&lt;p&gt;I will create a vagant box and host in my github to try downloading at some point for reference.&lt;/p&gt;

&lt;p&gt;Once the base box is downloaded , we go about initializing the vagant file to use the box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant init baseboxurl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should create a Vagrant File for you to edit and use to your needs.&lt;/p&gt;

&lt;p&gt;Customizing the vagrant file for usage &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.box = &quot;&amp;lt;http://baseboxurl&amp;gt;&quot; 
config.vm.network &quot;private_network&quot;, ip: &quot;192.168.66.66&quot;
config.vm.synced_folder &quot;data&quot;, &quot;/data/&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is made part of private network to access the virtual machine using the given ip address &amp;amp; then we create a sync folder between host and virtual machine. So we can transfer any code , downloadables or code artifacts in shared location using host ide and be able to build and deploy easily in virtual machine if administration console is not an option.&lt;/p&gt;

&lt;p&gt;Further you can add the base box and use it as reference to create another vagrant based virtual machine , the idea of base box is to be used like standard template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant add box ubuntubasebox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the box is avaiable in vagrant we can modify the Vagrant file to start using it directly from vagrant repository than looking up the reference from basebox url.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.box = &quot;&amp;lt;box name&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Starting the virtual machine using vagrant&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stopping the virtual machine using vagrant&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant halt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the virtual machine is up and running you can ssh into the ipaddress mentioned above and login to the linux machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username/password - vagrant/vagrant
                  - root/vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the container is ready you are free to install the software required and you can export a environment with database , app server , http servers etc and export them into a template &amp;amp; distribute for easy usage.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> devops</title>
   <link href="http://karpra.github.io/concept/2014/09/19/%20devops"/>
   <updated>2014-09-19T00:00:00-04:00</updated>
   <id>http://karpra.github.io/concept/2014/09/19/ devops</id>
   <content type="html">&lt;h2 id=&quot;what-is-devops&quot;&gt;What is Devops?&lt;/h2&gt;

&lt;p&gt;Development &amp;amp; Operations teams forging together is devops. When i say that let me explain the typical
lifecyle activities of development team and operations team in getting any solution or application 
up &amp;amp; running available for the business to start using internally or externally (enterprise,b2b,b2c or consumer market).&lt;/p&gt;

&lt;p&gt;Business typically are sponsors of any application or solution developed using a given platform ( eg : -python,php,java 
or .net etc) to solve a given business problem. Now comes project inception &amp;amp; companies bring in different set of teams
who for practical purposes have worked as seperate business unit within same organization who come together to solve 
a combined task towards a result oriented goal.&lt;/p&gt;

&lt;p&gt;Development team starts developing the application which goes through typical SDLC process from Business Requirement
defining the functional requirement of the application which believe it or not is always constantly changing business
constantly pushes the changes &amp;amp; change management is unavoidable and this it not something new. Operations team are responsible to deliver a infrastructure for the application to be hosted and running in an stable environment for maximum uptime , throughput &amp;amp; performance defined by the SLA requirements of the application.&lt;/p&gt;

&lt;p&gt;Business has always demanded these things : - &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application Development to be agile and nimble enough to constant changes in requirement.&lt;/li&gt;
  &lt;li&gt;Operations team to deliver consistent stable runtime environment to host the application efficiently.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;delivery-model&quot;&gt;Delivery Model&lt;/h2&gt;

&lt;p&gt;Traditional Delivery Model is time consuming and problematic on top it much easier for application development team to be nimble
but compromises quality of operations teams delivery for a stable enviornment. Either they need to choose to keep an older / unneeded infrastructure not being able to support runtime capability of application hosting (or) be adaptable to the change which has huge cost associated and time consuming.&lt;/p&gt;

&lt;p&gt;Software Delivery Model came with Agile methodology to support such changing app development / infrastructure change support system. Agile did solve in tracking progress which is quiker and faster was able to deliver quantifiable results in application development or product development. Since Agile demanded quicker wins in measurable progress now industry came up with Continous Integration &amp;amp; Continous Delivery for quicker wins for business to support the demands.&lt;/p&gt;

&lt;p&gt;Agile Methodology demanded few qualities of delivery process to be injected with to support the ever demanding landscape fo changes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Continous Integration&lt;/em&gt; - Its a way software development is buildable / repeatable &amp;amp; automated in process of integration solution delivered constantly for deployment ready enviornment.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Continous Delivery&lt;/em&gt; - This enables IT both dev and ops to have repeated stable environment for business to use by infrastructure supporting the needs of application to be deployed in runtime.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Release Management&lt;/em&gt; - &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;organizational-challenges&quot;&gt;Organizational Challenges.&lt;/h2&gt;

&lt;p&gt;Today dev &amp;amp; ops team work seperately to deliver the value business demands. Business always views IT function as one department , though in reality its operated seperately and two teams within IT department. When the dev team is notified of changes to app development they go through process of change management and push in changes to their software delivery. Ops teams are notified later even if they are proactively notified of app development changes most likely they understand the changes in their infrastructure later &amp;amp; this leads to blame game between dev versus ops team not fulfilling the business needs on time or quality.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;Continous Integration is predominately owned by dev team &amp;amp; Continous Delivery is worked out between release team and ops team.&lt;/p&gt;

&lt;p&gt;Few examples of tools are&lt;/p&gt;

&lt;h3 id=&quot;continous-integration&quot;&gt;Continous Integration&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Jenkins&lt;/li&gt;
  &lt;li&gt;Hudson ( a fork of jenkins)&lt;/li&gt;
  &lt;li&gt;Cruise Control&lt;/li&gt;
  &lt;li&gt;Travis CI&lt;/li&gt;
  &lt;li&gt;BuildBot&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;continous-delivery-dev-ops-tools&quot;&gt;Continous Delivery( dev ops tools)&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Chef&lt;/li&gt;
  &lt;li&gt;Puppet Labs&lt;/li&gt;
  &lt;li&gt;SaltStack&lt;/li&gt;
  &lt;li&gt;Ansible&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;DevOps improves the overall stability of your system, because there are more capable eyes on the effect of various changes. Because features can be more quickly delivered, there are less large upgrades that require downtime. Instead, changes are delivered in smaller, more manageable pieces that may not require downtime at all.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title> jekyll</title>
   <link href="http://karpra.github.io/static%20site%20generator/2014/09/18/%20jekyll"/>
   <updated>2014-09-18T00:00:00-04:00</updated>
   <id>http://karpra.github.io/static%20site%20generator/2014/09/18/ jekyll</id>
   <content type="html">&lt;p&gt;I have been contemplating to start a personal blog which could capture all the tweaks , hacks I keep myself induldged in from time to time during my free time. It was purely experimental or to get my hands dirty with new things in the industry mostly open source which has the power to distrupt the market creating vendor neutrality. I have been a big proponent of open source community in general perhaps incubated from the start of my career as i started out professionally in java world , although i did have brief stint with mainframe as well.&lt;/p&gt;

&lt;p&gt;After multiple failed attempts trying to create by own technical blog experimenting with popular blogging engines like blogger, wordpress , tumblr I had given up the idea of starting my own blog until i stumbled upon static site generators. It seemed like a good idea at the moment for me to start blogging as it seemed very simple and was readily available for me to write the blog as much as like i was logging information in a scrap book. The added appeal was that i could write my blog using Markdown or Liquid Templating Engines.&lt;/p&gt;

&lt;p&gt;Also the biggest luring benefit remains the possibility of publishing your blog quickly as and when you made changes was a great benefit in my opinion. Git is a source version control system which is big proponent of distributed version control system unlike traditional client/server source code version systems like Subversion , CVS etc. Now your blog gets published right out of the version control without me having to run a http server or build server was a big boon.&lt;/p&gt;

&lt;p&gt;You should refer to github for creating a repository of your code which can live in the cloud and it remains available for public much like open source strategy. Although I not going to write anything great in my blog , but was worth trying to document it for my purpose as reference or a means for me to transfer knowledge i have acquired over years being in this industry. It is my way of &lt;strong&gt;thanking many&lt;/strong&gt; who have helped me learn things , for without them I would never be able to complete my tasks everyday with what little i have achieved.&lt;/p&gt;

&lt;h1 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h1&gt;

&lt;p&gt;Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through Markdown (or Textile) and Liquid converters, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server. Jekyll also happens to be the engine behind GitHub Pages, which means you can use Jekyll to host your project’s page, blog, or website from GitHub’s servers for free.&lt;/p&gt;

&lt;p&gt;Please refer to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; website. &lt;/p&gt;

&lt;p&gt;Below is my way of showing i have started blogging , perhaps stupid but representing actions in code is an amazing feeling :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function startBloggin(){
        return list.posts();
    }
    
    printf(startBlogging())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This blog is powered by github pages &amp;amp; it runs jekyll templates underneath to convert text files to html files.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
